function preLoad() {	if (!this.support.loading) {		alert("Flash Player未安装！");		return false;	} else if (!this.support.imageResize) {		alert("请先安装Flash Player！");		return false;	}}function loadFailed() {	alert("系统初始化失败，请稍后再试！");}function fileQueued(file) {	try {		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setStatus("请上传文件...");		progress.toggleCancel(true, this);	} catch (ex) {		this.debug(ex);	}}//当上传队列中的一个文件完成了一个上传周期，无论是成功(uoloadSuccess触发)还是失败(uploadError触发)function uploadComplete(file) {	try {		/*		 * I want the next upload to continue automatically so I'll call		 * startUpload here		 */		if (this.getStats().files_queued > 0) {			this.startUpload();		} else {			// var progress = new FileProgress(file,			// this.customSettings.upload_target);			// progress.setComplete();			// progress.setStatus("All images received.");			// progress.toggleCancel(false);		}	} catch (ex) {		this.debug(ex);	}}function fileDialogComplete(numFilesSelected, numFilesQueued) {	try {		//alert(1);		if (numFilesSelected > 0) {			//document.getElementById(this.customSettings.cancelButtonId).disabled = false;		}		//alert(2);		/* I want auto start the upload and I can do that here */		this.startUpload();	} catch (ex)  {        this.debug(ex);	}}String.prototype.trim = function() {	return this.replace(/^\s+|\s+$/g, "");}function fileQueueError(file, errorCode, message) {	try {		if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {			alert("您上传的文件数量太多！\n" + (message === 0 ? "You have reached the upload limit." : "You may select " + (message > 1 ? "up to " + message + " files." : "one file.")));			return;		}		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setError();		progress.toggleCancel(false);		switch (errorCode) {		case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:			progress.setStatus("您选择的文件太大，请重新选择！");			this.debug("Error Code: File too big, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:			progress.setStatus("Cannot upload Zero Byte files.");			this.debug("Error Code: Zero byte file, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:			progress.setStatus("Invalid File Type.");			this.debug("Error Code: Invalid File Type, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		default:			if (file !== null) {				progress.setStatus("未知错误，请稍后重试！");			}			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		}	} catch (ex) {        this.debug(ex);    }}function uploadStart(file) {	try {		/* I don't want to do any file validation or anything,  I'll just update the UI and		return true to indicate that the upload should start.		It's important to update the UI here because in Linux no uploadProgress events are called. The best		we can do is say we are uploading.		 */		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setStatus("Uploading...");		progress.toggleCancel(true, this);	}	catch (ex) {}		return true;}function uploadProgress(file, bytesLoaded, bytesTotal) {	try {		var percent = Math.ceil((bytesLoaded / bytesTotal) * 100);		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setProgress(percent);		progress.setStatus("Uploading...");	} catch (ex) {		this.debug(ex);	}}function uploadSuccess(file, serverData) {	try {		//console.log(serverData);		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setComplete();		progress.setStatus("文件上传成功！");		progress.toggleCancel(false);        queueComplete(this.getStats().successful_uploads);		var ro = eval("(" + serverData + ")");// 转换为json对象		var tempTag = '<tr bgcolor="#FFFFFF"><td><div align="center"><a href="" ><img class="thumbnail" height="80" width="120" src="'+ro.filepath + ro.filename+'"></a></div></td><td></td><td ><div align="center"><a href="#" id="pic_'+ro.insert_id+'" aid="'+ro.insert_id+'" onclick="javascript:doAjax(this)"  class="delete_button">削除</a></div></td></tr>';		$(tempTag).insertAfter("#header_picture");		var insert_id = ro.insert_id;		var attachments = $('#' + multi_img_id).val();		if(attachments == ''){			$('#' + multi_img_id).val(insert_id);		} else {			$('#' + multi_img_id).val(attachments+','+insert_id);		}		//$('img.thumbnail').imgZoom();	} catch (ex) {		this.debug(ex);	}}function doAjax(obj){	if(!confirm('确认要删除吗?')){		return;	}	var aid = $(obj).attr("aid");	var attachments = $('#' + multi_img_id).val();	var dataString = 'aid='+ aid + '&attachments=' + attachments;	var parent = $(obj).parent();		$.ajax({		type: "POST",		url: APP+"/file/do_delete_img",		data: dataString,		dataType : "json",		cache: false,		success: function(result)		{			$('#' + multi_img_id).val(result.data);			$("#pic_"+aid).parent().parent().parent().remove(); 		}	});}function uploadError(file, errorCode, message) {	try {		var progress = new FileProgress(file, this.customSettings.progressTarget);		progress.setError();		progress.toggleCancel(false);		switch (errorCode) {		case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:			progress.setStatus("上传中发生错误: " + message);			this.debug("Error Code: HTTP Error, File name: " + file.name + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:			progress.setStatus("Upload Failed.");			this.debug("Error Code: Upload Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.IO_ERROR:			progress.setStatus("Server (IO) Error");			this.debug("Error Code: IO Error, File name: " + file.name + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:			progress.setStatus("Security Error");			this.debug("Error Code: Security Error, File name: " + file.name + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:			progress.setStatus("Upload limit exceeded.");			this.debug("Error Code: Upload Limit Exceeded, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:			progress.setStatus("Failed Validation.  Upload skipped.");			this.debug("Error Code: File Validation Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:			progress.setStatus("Cancelled");			progress.setCancelled();			break;		case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:			progress.setStatus("Stopped");			break;		default:			progress.setStatus("Unhandled Error: " + errorCode);			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);			break;		}	} catch (ex) {        this.debug(ex);    }}// This event comes from the Queue Pluginfunction queueComplete(numFilesUploaded) {	var status = document.getElementById("divStatus");	status.innerHTML = numFilesUploaded + " 个文件已经上传！";}function addImage(src) {	var newImg = document.createElement("img");	newImg.style.margin = "5px";	newImg.style.verticalAlign = "middle";	var divThumbs = document.getElementById("thumbnails");	divThumbs.insertBefore(newImg, divThumbs.firstChild);	//document.getElementById("thumbnails").appendChild(newImg);	if (newImg.filters) {		try {			newImg.filters.item("DXImageTransform.Microsoft.Alpha").opacity = 0;		} catch (e) {			// If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.			newImg.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + 0 + ')';		}	} else {		newImg.style.opacity = 0;	}	newImg.onload = function () {		fadeIn(newImg, 0);	};	newImg.src = src;}function fadeIn(element, opacity) {	var reduceOpacityBy = 5;	var rate = 30;	// 15 fps	if (opacity < 100) {		opacity += reduceOpacityBy;		if (opacity > 100) {			opacity = 100;		}		if (element.filters) {			try {				element.filters.item("DXImageTransform.Microsoft.Alpha").opacity = opacity;			} catch (e) {				// If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.				element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + opacity + ')';			}		} else {			element.style.opacity = opacity / 100;		}	}	if (opacity < 100) {		setTimeout(function () {			fadeIn(element, opacity);		}, rate);	}}