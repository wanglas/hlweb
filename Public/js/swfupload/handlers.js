function cropPhoto(imgid,imgsrc){	var url = APP+"/File/crop?imgsrc="+imgsrc+"&imgid="+imgid;	cropdialog('newsphoto'+imgid, url, '图片剪裁', 500, 500,cropSavePhoto,'保存剪裁图片');}function cropSavePhoto(ifr){	if($("#cropForm", ifr.document).length>0){		$("#cropForm", ifr.document).submit();		return false;	}else{		var src = $("#showcropbox", ifr.document).attr('src');		var img_id = $("#img_id", ifr.document).val();		$("#showimg_"+img_id).attr('src',src);		//console.log(img_id);		return true;	}}//弹出对话框function cropdialog(id, linkurl, title, w, h, callback_fun, btn) {    if (!w)        w = 700;    if (!h)        h = 500;    head.load(PUBLIC+"/js/artDialog/artDialog.js", PUBLIC+"/js/artDialog/plugins/iframeTools.js", PUBLIC+"/js/artDialog/skins/aero.css", function() {        art.dialog.open(linkurl, {            id: id,            title: title,            width: w,            height: h,            lock: true,            fixed: true,            background: "#CCCCCC",            opacity: 0,            cancelVal: '关闭',            cancel: true,            button: [{                    name: btn,                    callback: function() {                        var ifr = this.iframe.contentWindow;                        callback_fun(ifr);                        return false;                    }                }]        });    });}//加入队列错误时候触发function fileQueueError_ll(file,errorCode,message) {	try {		var imageName = "error.gif";		var errorName = "";		if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {			errorName = "您只能选择上传一个文件！";		}		if (errorName !== "") {			alert(errorName);			return;		}		switch (errorCode) {		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:			alert("您不能上传一个空文件！");			break;		case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:			alert("您上传的文件太大了！");			break;		case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:			alert("您上传的是一个无效文件！");			break;		default:			alert(message);			break;		}		// addImage("images/" + imageName);	} catch (ex) {		this.debug(ex);	}}function fileDialogComplete_ll(numFilesSelected,numFilesQueued) {	try {		if (numFilesQueued > 0) {			this.startUpload();		}	} catch (ex) {		this.debug(ex);	}}function uploadProgress_ll(file,bytesLoaded) {	try {		var percent = Math.ceil((bytesLoaded / file.size) * 100);		if (percent === 100) {		} else {		}	} catch (ex) {		this.debug(ex);	}}// 当文件上传的处理已经完成后触发function uploadSuccess_ll(file,serverData) {	//console.log(serverData);	var ro = eval("(" + serverData + ")");// 转换为json对象	if(ro.error==''){		var imgPath = '';		if(ro.small_savepath==""){			imgPath = ro.filepath + ro.filename;		} else {		    imgPath = ro.small_savepath + ro.filename;		}		$('#imgupload_' + img_id).html(				"<a href=javascript:cropPhoto('"+ ro.insert_id +"','"+ ro.filepath + ro.filename						+ "') ><img id='showimg_"+ro.insert_id+"' width='120' src='"						+ imgPath						+ "' /></a>");		$('#' + img_id).val(ro.insert_id);	} else {		alert(ro.error);	}}// 当上传队列中的一个文件完成了一个上传周期，无论是成功(uoloadSuccess触发)还是失败(uploadError触发)function uploadComplete_ll(file) {}// 无论什么时候，只要上传被终止或者没有成功完成，那么该事件都将被触发。function uploadError_ll(file,errorCode,message) {	var imageName = "error.gif";	var progress;	try {		switch (errorCode) {		case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:			try {				progress = new FileProgress(file,						this.customSettings.upload_target);				progress.setCancelled();				progress.setStatus("Cancelled");				progress.toggleCancel(false);			} catch (ex1) {				this.debug(ex1);			}			break;		case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:			try {				progress = new FileProgress(file,						this.customSettings.upload_target);				progress.setCancelled();				progress.setStatus("Stopped");				progress.toggleCancel(true);			} catch (ex2) {				this.debug(ex2);			}		case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:			imageName = "uploadlimit.gif";			break;		default:			alert(message);			break;		}		addImage("images/" + imageName);	} catch (ex3) {		this.debug(ex3);	}}function addImage_ll(src) {	var newImg = document.createElement("img");	newImg.style.margin = "5px";	document.getElementById("thumbnails").appendChild(newImg);	if (newImg.filters) {		try {			newImg.filters.item("DXImageTransform.Microsoft.Alpha").opacity = 0;		} catch (e) {			// If it is not set initially, the browser will throw an error. This			// will set it if it is not set yet.			newImg.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity='					+ 0 + ')';		}	} else {		newImg.style.opacity = 0;	}	newImg.onload = function() {		fadeIn(newImg, 0);	};	newImg.src = src;}function fadeIn_ll(element,opacity) {	var reduceOpacityBy = 5;	var rate = 30; // 15 fps	if (opacity < 100) {		opacity += reduceOpacityBy;		if (opacity > 100) {			opacity = 100;		}		if (element.filters) {			try {				element.filters.item("DXImageTransform.Microsoft.Alpha").opacity = opacity;			} catch (e) {				// If it is not set initially, the browser will throw an error.				// This will set it if it is not set yet.				element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity='						+ opacity + ')';			}		} else {			element.style.opacity = opacity / 100;		}	}	if (opacity < 100) {		setTimeout(function() {			fadeIn(element, opacity);		}, rate);	}}